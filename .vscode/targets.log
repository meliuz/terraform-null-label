make all --print-data-base --no-builtin-variables --no-builtin-rules --question
make: *** No rule to make target 'all'.  Stop.

# GNU Make 4.2.1
# Built for x86_64-pc-linux-gnu
# Copyright (C) 1988-2016 Free Software Foundation, Inc.
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
# This is free software: you are free to change and redistribute it.
# There is NO WARRANTY, to the extent permitted by law.

# Make data base, printed on Fri Aug 19 13:32:05 2022

# Variables

# 'override' directive
GNUMAKEFLAGS := 
# automatic
<D = $(patsubst %/,%,$(dir $<))
# makefile (from '.build-harness', line 18)
BUILD_HARNESS_BRANCH = master
# automatic
?F = $(notdir $?)
# environment
DESKTOP_SESSION = ubuntu
# default
.SHELLFLAGS := -c
# environment
XDG_SESSION_CLASS = user
# environment
SNAP_COMMON = /var/snap/code/common
# environment
XDG_SESSION_TYPE = x11
# automatic
?D = $(patsubst %/,%,$(dir $?))
# environment
IM_CONFIG_PHASE = 1
# automatic
@D = $(patsubst %/,%,$(dir $@))
# environment
XAUTHORITY = /run/user/1000/gdm/Xauthority
# environment
GDMSESSION = ubuntu
# environment
XMODIFIERS = @im=ibus
# makefile
CURDIR := /github/terraform-null-label
# makefile (from '.build-harness', line 13)
SHELL = /bin/bash
# makefile (from '.build-harness', line 11)
BUILD_HARNESS_TEMPLATES_MAKEFILE_GUARD := included
# environment
SNAP_DATA = /var/snap/code/105
# environment
VTE_VERSION = 6003
# environment
VSCODE_NLS_CONFIG = {"locale":"en-us","availableLanguages":{},"_languagePackSupport":true}
# environment
JOURNAL_STREAM = 8:71875
# makefile (from '.build-harness', line 108)
DEFAULT_DOCKER_ENVS := AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN TERM AWS_PROFILE AWS_REGION AWS_DEFAULT_PROFILE AWS_DEFAULT_REGION
# environment
XDG_CONFIG_DIRS = /etc/xdg/xdg-ubuntu:/etc/xdg
# environment
SNAP_INSTANCE_NAME = code
# environment
SNAP_ARCH = amd64
# makefile (from '.build-harness', line 1)
MAKEFILE_LIST :=  Makefile .build-harness
# automatic
@F = $(notdir $@)
# environment
GIO_LAUNCHED_DESKTOP_FILE = /usr/share/applications/terminator.desktop
# makefile (from '.build-harness', line 15)
BUILD_HARNESS_ORG = cloudposse
# environment
USERNAME = rodrigo
# environment
MAKELEVEL := 0
# environment
MANDATORY_PATH = /usr/share/gconf/ubuntu.mandatory.path
# environment
XDG_DATA_DIRS = /usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop
# environment
DBUS_SESSION_BUS_ADDRESS = unix:path=/run/user/1000/bus
# environment
LC_CTYPE = pt_BR.UTF-8
# makefile (from '.build-harness', line 33)
harness_install = curl --retry 5 --fail --silent --retry-delay 1 https://raw.githubusercontent.com/$(BUILD_HARNESS_ORG)/$(BUILD_HARNESS_PROJECT)/$(BUILD_HARNESS_BRANCH)/bin/install.sh | bash -s "$(BUILD_HARNESS_ORG)" "$(BUILD_HARNESS_PROJECT)" "$(BUILD_HARNESS_BRANCH)"
# environment
MANAGERPID = 3543
# environment
LC_NAME = pt_BR.UTF-8
# environment
VSCODE_CWD = /github/terraform-null-label
# environment
GSETTINGS_SCHEMA_DIR = /snap/code/105/usr/share/glib-2.0/schemas
# default
MAKE_HOST := x86_64-pc-linux-gnu
# environment
PATH = /home/rodrigo/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
# environment
GPG_AGENT_INFO = /run/user/1000/gnupg/S.gpg-agent:0:1
# environment
LSCOLORS = Gxfxcxdxbxegedabagacad
# environment
SESSION_MANAGER = local/mlz-mc-058028:@/tmp/.ICE-unix/3790,unix/mlz-mc-058028:/tmp/.ICE-unix/3790
# environment
XDG_RUNTIME_DIR = /run/user/1000
# environment
GDK_PIXBUF_MODULE_FILE = /home/rodrigo/snap/code/common/.cache/gdk-pixbuf-loaders.cache
# environment
SNAP = /snap/code/105
# makefile (from '.build-harness', line 17)
BUILD_HARNESS_DOCKER_IMAGE = $(BUILD_HARNESS_ORG)/$(BUILD_HARNESS_PROJECT)
# makefile (from '.build-harness', line 19)
BUILD_HARNESS_CLONE_URL = https://github.com/$(BUILD_HARNESS_ORG)/$(BUILD_HARNESS_PROJECT).git
# environment
SNAP_VERSION = e4503b30
# environment
XDG_MENU_PREFIX = gnome-
# environment
DISABLE_WAYLAND = 1
# environment
ELECTRON_RUN_AS_NODE = 1
# environment
INVOCATION_ID = 878224bd835b407c9a056de5cd595f9d
# environment
GDK_PIXBUF_MODULEDIR = /snap/code/105/usr/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders
# makefile (from '.build-harness', line 42)
harness_auto_init = if [[ -f "/build-harness/Makefile" || -f "/$(BUILD_HARNESS_PROJECT)/Makefile" ]]; then echo "[.build-harness]: In $(BUILD_HARNESS_PROJECT) docker container, skipping auto-init" ; elif grep -q docker /proc/1/cgroup 2>/dev/null; then echo "[.build-harness]: In unknown docker container, skipping auto-init" ; elif [[ "$(BUILD_HARNESS_PATH)" != "$(BUILD_HARNESS_PATH_LOCAL)" && -f "$(BUILD_HARNESS_PATH)/Makefile" ]]; then echo "[.build-harness]: Using external $(BUILD_HARNESS_PATH), skipping auto-init" ; elif [[ "$(BUILD_HARNESS_PATH)" == "$(BUILD_HARNESS_PATH_LOCAL)" && -f "$(BUILD_HARNESS_PATH)/Makefile" && "$$(git -C '$(BUILD_HARNESS_PATH_LOCAL)' ls-remote '$(BUILD_HARNESS_CLONE_URL)' '$(BUILD_HARNESS_BRANCH)' | cut -f1)" == "$$(git -C '$(BUILD_HARNESS_PATH_LOCAL)' rev-parse HEAD)" ]]; then echo "[.build-harness]: Clone of $(BUILD_HARNESS_PROJECT) is up-to-date, skipping auto-init" ; else $(harness_install) ; fi
# default
.FEATURES := target-specific order-only second-expansion else-if shortest-stem undefine oneshell archives jobserver output-sync check-symlink load
# environment
ELECTRON_NO_ATTACH_CONSOLE = 1
# environment
LS_COLORS = rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
# environment
XDG_SESSION_DESKTOP = ubuntu
# environment
SSH_AUTH_SOCK = /run/user/1000/keyring/ssh
# environment
GIO_LAUNCHED_DESKTOP_FILE_PID = 20155
# automatic
%F = $(notdir $%)
# environment
DISPLAY = :0
# environment
SNAP_INSTANCE_KEY = 
# makefile (from '.build-harness', line 110)
EXTRA_DOCKER_ENVS = AWS_CONFIG_FILE AWS_SHARED_CREDENTIALS_FILE
# makefile (from '.build-harness', line 14)
PWD = $(shell pwd)
# default
.LOADED := 
# environment
SSH_AGENT_PID = 3751
# environment
ORIGINAL_XDG_CURRENT_DESKTOP = ubuntu:GNOME
# environment
GTK_MODULES = gail:atk-bridge
# environment
VSCODE_AMD_ENTRYPOINT = vs/workbench/api/node/extensionHostProcess
# environment
HOME = /home/rodrigo
# environment
LC_MEASUREMENT = pt_BR.UTF-8
# environment
VSCODE_CLI = 1
# environment
VSCODE_CODE_CACHE_PATH = /home/rodrigo/.config/Code/CachedData/e4503b30fc78200f846c62cf8091b76ff5547662
# environment
LOGNAME = rodrigo
# makefile (from 'Makefile', line 4)
README_DEPS = docs/targets.md docs/terraform.md
# environment
APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL = 1
# environment
SNAP_LIBRARY_PATH = /var/lib/snapd/lib/gl:/var/lib/snapd/lib/gl32:/var/lib/snapd/void
# environment
SNAP_CONTEXT = nrswqUDQzp4n5LHPLuVa_qRhlFtMsCJ5dK_xRWzdfkxO0pA3esy2
# automatic
+F = $(notdir $+)
# environment
ZSH = /home/rodrigo/.oh-my-zsh
# environment
SNAP_USER_COMMON = /home/rodrigo/snap/code/common
# environment
VSCODE_HANDLES_UNCAUGHT_ERRORS = true
# environment
GNOME_DESKTOP_SESSION_ID = this-is-deprecated
# automatic
^D = $(patsubst %/,%,$(dir $^))
# environment
LC_TIME = pt_BR.UTF-8
# environment
SNAP_REAL_HOME = /home/rodrigo
# environment
COLORTERM = truecolor
# default
MAKE = $(MAKE_COMMAND)
# default
MAKECMDGOALS := all
# environment
QT_IM_MODULE = ibus
# environment
SNAP_USER_DATA = /home/rodrigo/snap/code/105
# environment
SHLVL = 1
# environment
GNOME_SHELL_SESSION_MODE = ubuntu
# default
MAKE_VERSION := 4.2.1
# makefile (from '.build-harness', line 23)
BUILD_HARNESS_PATH_LOCAL := /github/terraform-null-label/build-harness
# environment
USER = rodrigo
# environment
SNAP_REVISION = 105
# environment
LC_MONETARY = pt_BR.UTF-8
# makefile
.DEFAULT_GOAL := init
# environment
XDG_CURRENT_DESKTOP = Unity
# environment
LESS = -R
# automatic
%D = $(patsubst %/,%,$(dir $%))
# environment
LC_TELEPHONE = pt_BR.UTF-8
# makefile (from '.build-harness', line 27)
BUILD_HARNESS_DOCKER_SHA_TAG_CMD := git -C "/github/terraform-null-label/build-harness" log -n 1 --format=sha-%h 2>/dev/null || echo latest
# default
MAKE_COMMAND := make
# environment
OLDPWD = /github/temp-docker-infra
# environment
TERMINATOR_DBUS_PATH = /net/tenshu/Terminator2
# default
.VARIABLES := 
# automatic
*F = $(notdir $*)
# environment
VSCODE_IPC_HOOK = /run/user/1000/vscode-8e0f59ea-1.70.2-main.sock
# environment
BAMF_DESKTOP_FILE_HINT = /var/lib/snapd/desktop/applications/code_code.desktop
# makefile
MAKEFLAGS = pqrR
# environment
MFLAGS = -pqrR
# automatic
*D = $(patsubst %/,%,$(dir $*))
# automatic
+D = $(patsubst %/,%,$(dir $+))
# environment
GDK_BACKEND = x11
# environment
LC_PAPER = pt_BR.UTF-8
# environment
NO_AT_BRIDGE = 1
# environment
LC_IDENTIFICATION = pt_BR.UTF-8
# environment
QT_ACCESSIBILITY = 1
# environment
DEFAULTS_PATH = /usr/share/gconf/ubuntu.default.path
# makefile (from '.build-harness', line 30)
BUILD_HARNESS_AUTO_INIT = false
# 'override' directive
.SHELLSTATUS := 0
# default
MAKEFILES := 
# environment
SNAP_COOKIE = nrswqUDQzp4n5LHPLuVa_qRhlFtMsCJ5dK_xRWzdfkxO0pA3esy2
# environment
LC_NUMERIC = pt_BR.UTF-8
# automatic
<F = $(notdir $<)
# makefile (from '.build-harness', line 111)
DOCKER_ENVS = $(DEFAULT_DOCKER_ENVS) $(EXTRA_DOCKER_ENVS)
# environment
PHANTOMJS_PLATFORM = linux
# environment
PHANTOMJS_ARCH = x64
# environment
SNAP_NAME = code
# environment
PAGER = less
# environment
LC_ALL = C
# makefile (from '.build-harness', line 24)
BUILD_HARNESS_PATH := /github/terraform-null-label/build-harness
# environment
GJS_DEBUG_TOPICS = JS ERROR;JS LOG
# automatic
^F = $(notdir $^)
# default
SUFFIXES := 
# makefile (from '.build-harness', line 16)
BUILD_HARNESS_PROJECT = build-harness
# environment
SNAP_REEXEC = 
# environment
CHROME_DESKTOP = code-url-handler.desktop
# environment
WINDOWPATH = 2
# default
 
.INCLUDE_DIRS = /usr/include /usr/local/include /usr/include
# environment
GJS_DEBUG_OUTPUT = stderr
# default
.RECIPEPREFIX := 
# environment
LC_ADDRESS = pt_BR.UTF-8
# environment
LANG = C
# environment
TERM = xterm-256color
# environment
TERMINATOR_DBUS_NAME = net.tenshu.Terminator21a9d5db22c73a993ff0b42f64b396873
# environment
VSCODE_PID = 4883
# environment
TERMINATOR_UUID = urn:uuid:cee31792-8069-4353-bbd7-ce691207650f
# variable set hash-table stats:
# Load=155/1024=15%, Rehash=0, Collisions=65/338=19%

# Pattern-specific Variable Values

# No pattern-specific variable values.

# Directories

# . (device 66306, inode 5383797): 19 files, no impossibilities.

# 19 files, no impossibilities in 1 directories.

# Implicit Rules

# No implicit rules.

# Files

# makefile (from '.build-harness', line 135)
build-harness/shell-slim: ARGS := -l || true
# makefile (from '.build-harness', line 127)
build-harness/shell-slim: RUNNER_DOCKER_IMAGE = $(BUILD_HARNESS_DOCKER_IMAGE)
# makefile (from '.build-harness', line 130)
build-harness/shell-slim: RUNNER_DOCKER_TAG = $(shell docker inspect --type=image $(RUNNER_DOCKER_IMAGE):$(RUNNER_DOCKER_SHA_TAG) >/dev/null 2>&1 && echo "$(RUNNER_DOCKER_SHA_TAG) " || echo "slim-$(RUNNER_DOCKER_SHA_TAG)")
# makefile (from '.build-harness', line 129)
build-harness/shell-slim: RUNNER_DOCKER_SHA_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
# makefile (from '.build-harness', line 136)
build-harness/shell-slim: ENTRYPOINT := /bin/bash
# makefile (from '.build-harness', line 134)
build-harness/shell-slim: TARGETS = $(TARGET)
build-harness/shell-slim: build-harness/runner
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=6/32=19%, Rehash=0, Collisions=8/14=57%

safe-directory:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from '.build-harness', line 90):
	[[ -n "$$GITHUB_WORKSPACE" ]] && git config --global --add safe.directory "$$GITHUB_WORKSPACE" || git config --global --add safe.directory '*'

# makefile (from '.build-harness', line 120)
pr/pre-commit: RUNNER_DOCKER_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
# makefile (from '.build-harness', line 121)
pr/pre-commit: RUNNER_DOCKER_IMAGE = $(BUILD_HARNESS_DOCKER_IMAGE)
# makefile (from '.build-harness', line 139)
pr/pre-commit: ENTRYPOINT := /usr/bin/make
# makefile (from '.build-harness', line 148)
pr/pre-commit: ARGS := pre-commit/run
pr/pre-commit: build-harness/runner
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=4/32=12%, Rehash=0, Collisions=3/6=50%

# makefile (from '.build-harness', line 151)
tf14-upgrade: TERRAFORM_FORCE_README := true
# makefile (from '.build-harness', line 127)
tf14-upgrade: RUNNER_DOCKER_IMAGE = $(BUILD_HARNESS_DOCKER_IMAGE)
# makefile (from '.build-harness', line 130)
tf14-upgrade: RUNNER_DOCKER_TAG = $(shell docker inspect --type=image $(RUNNER_DOCKER_IMAGE):$(RUNNER_DOCKER_SHA_TAG) >/dev/null 2>&1 && echo "$(RUNNER_DOCKER_SHA_TAG) " || echo "slim-$(RUNNER_DOCKER_SHA_TAG)")
# makefile (from '.build-harness', line 129)
tf14-upgrade: RUNNER_DOCKER_SHA_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
# makefile (from '.build-harness', line 139)
tf14-upgrade: ENTRYPOINT := /usr/bin/make
# makefile (from '.build-harness', line 152)
tf14-upgrade: ARGS := github/init terraform/v14-rewrite
tf14-upgrade: build-harness/runner
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=6/32=19%, Rehash=0, Collisions=3/9=33%

# Not a target:
all:
#  Command line target.
#  Implicit rule search has been done.
#  File does not exist.
#  File has not been updated.

.PHONY: init clean safe-directory build-harness/shell builder build-harness/shell/pull builder/pull builder/build builder-slim/build build-harness/shell-slim builder-slim pr/auto-format pr/auto-format/host pr/readme pr/readme/host pr/pre-commit pr/github-update pr/github-update/host tf14-upgrade tester tester/pull build-harness/runner reset-owner
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# makefile (from '.build-harness', line 120)
pr/readme: RUNNER_DOCKER_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
# makefile (from '.build-harness', line 121)
pr/readme: RUNNER_DOCKER_IMAGE = $(BUILD_HARNESS_DOCKER_IMAGE)
# makefile (from '.build-harness', line 129)
pr/readme: RUNNER_DOCKER_SHA_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
# makefile (from '.build-harness', line 139)
pr/readme: ENTRYPOINT := /usr/bin/make
# makefile (from '.build-harness', line 142)
pr/readme: ARGS := readme/deps readme
pr/readme: build-harness/runner
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=5/32=16%, Rehash=0, Collisions=4/10=40%

# makefile (from '.build-harness', line 94)
build-harness/shell/pull: BUILD_HARNESS_DOCKER_SHA_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
build-harness/shell/pull:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=1/32=3%, Rehash=0, Collisions=0/2=0%
#  recipe to execute (from '.build-harness', line 96):
	docker pull $(BUILD_HARNESS_DOCKER_IMAGE):$(BUILD_HARNESS_DOCKER_SHA_TAG)
	@[[ "$(BUILD_HARNESS_DOCKER_SHA_TAG)" == "latest" ]] || docker pull $(BUILD_HARNESS_DOCKER_IMAGE):latest

# makefile (from '.build-harness', line 135)
builder-slim: ARGS := -l || true
# makefile (from '.build-harness', line 127)
builder-slim: RUNNER_DOCKER_IMAGE = $(BUILD_HARNESS_DOCKER_IMAGE)
# makefile (from '.build-harness', line 130)
builder-slim: RUNNER_DOCKER_TAG = $(shell docker inspect --type=image $(RUNNER_DOCKER_IMAGE):$(RUNNER_DOCKER_SHA_TAG) >/dev/null 2>&1 && echo "$(RUNNER_DOCKER_SHA_TAG) " || echo "slim-$(RUNNER_DOCKER_SHA_TAG)")
# makefile (from '.build-harness', line 129)
builder-slim: RUNNER_DOCKER_SHA_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
# makefile (from '.build-harness', line 136)
builder-slim: ENTRYPOINT := /bin/bash
# makefile (from '.build-harness', line 134)
builder-slim: TARGETS = $(TARGET)
builder-slim: build-harness/runner
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=6/32=19%, Rehash=0, Collisions=8/14=57%

# Not a target:
Makefile:
#  Implicit rule search has been done.
#  Last modified 2022-08-19 09:59:25.796001828
#  File has been updated.
#  Successfully updated.

# makefile (from '.build-harness', line 143)
pr/github-update/host: ARGS := github/update
pr/github-update/host: safe-directory
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=1/32=3%, Rehash=0, Collisions=0/1=0%
#  recipe to execute (from '.build-harness', line 146):
	$(MAKE) $(ARGS)

# makefile (from '.build-harness', line 99)
builder/build: DOCKER_IMAGE_NAME = $(BUILD_HARNESS_DOCKER_IMAGE):$(BUILD_HARNESS_DOCKER_SHA_TAG)
# makefile (from '.build-harness', line 94)
builder/build: BUILD_HARNESS_DOCKER_SHA_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
builder/build:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=2/32=6%, Rehash=0, Collisions=0/3=0%
#  recipe to execute (from '.build-harness', line 101):
	@$(MAKE) --no-print-directory docker/build

# makefile (from '.build-harness', line 116)
tester: MOUNT_HOME = $(shell [ -d "$$HOME" ] && printf -- "-e HOME -v \"%s\":\"%s\"" "$$HOME" "$$HOME")
# makefile (from '.build-harness', line 158)
tester: TEST_HARNESS_DOCKER_TAG = latest
# makefile (from '.build-harness', line 157)
tester: TEST_HARNESS_DOCKER_IMAGE = cloudposse/test-harness
# makefile (from '.build-harness', line 117)
tester: TARGETS = $(TARGET)
# makefile (from '.build-harness', line 159)
tester: RUNNER_DOCKER_IMAGE = $(TEST_HARNESS_DOCKER_IMAGE)
# makefile (from '.build-harness', line 160)
tester: RUNNER_DOCKER_TAG = $(TEST_HARNESS_DOCKER_TAG)
# makefile (from '.build-harness', line 119)
tester: ENTRYPOINT := /bin/bash
# makefile (from '.build-harness', line 118)
tester: ARGS := -l || true
tester: build-harness/runner
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=8/32=25%, Rehash=0, Collisions=7/18=39%

reset-owner:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from '.build-harness', line 183):
	@if [[ -n $$(find . -xdev -user 0 -print) ]]; then \
		printf "\n* To reset ownership on files, run:\n  sudo find . -xdev -user 0 -exec chown $$USER {} \;\n\n" ; \
	else \
		printf "\n* No root-owned files found\n\n" ; \
	fi

# Not a target:
/github/terraform-null-label/build-harness/Makefile:
#  Implicit rule search has been done.
#  File does not exist.
#  File has been updated.
#  Failed to be updated.

# makefile (from '.build-harness', line 94)
builder/pull: BUILD_HARNESS_DOCKER_SHA_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
builder/pull:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=1/32=3%, Rehash=0, Collisions=0/2=0%
#  recipe to execute (from '.build-harness', line 96):
	docker pull $(BUILD_HARNESS_DOCKER_IMAGE):$(BUILD_HARNESS_DOCKER_SHA_TAG)
	@[[ "$(BUILD_HARNESS_DOCKER_SHA_TAG)" == "latest" ]] || docker pull $(BUILD_HARNESS_DOCKER_IMAGE):latest

# makefile (from '.build-harness', line 127)
pr/auto-format: RUNNER_DOCKER_IMAGE = $(BUILD_HARNESS_DOCKER_IMAGE)
# makefile (from '.build-harness', line 130)
pr/auto-format: RUNNER_DOCKER_TAG = $(shell docker inspect --type=image $(RUNNER_DOCKER_IMAGE):$(RUNNER_DOCKER_SHA_TAG) >/dev/null 2>&1 && echo "$(RUNNER_DOCKER_SHA_TAG) " || echo "slim-$(RUNNER_DOCKER_SHA_TAG)")
# makefile (from '.build-harness', line 129)
pr/auto-format: RUNNER_DOCKER_SHA_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
# makefile (from '.build-harness', line 139)
pr/auto-format: ENTRYPOINT := /usr/bin/make
# makefile (from '.build-harness', line 141)
pr/auto-format: ARGS := github/update terraform/fmt readme
pr/auto-format: build-harness/runner
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=5/32=16%, Rehash=0, Collisions=3/8=38%

# Not a target:
.build-harness:
#  Implicit rule search has been done.
#  Last modified 2022-08-19 13:32:05.716040769
#  File has been updated.
 
#  Successfully updated.

# Not a target:
.DEFAULT:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# makefile (from '.build-harness', line 103)
builder-slim/build: DOCKER_IMAGE_NAME = $(BUILD_HARNESS_DOCKER_IMAGE):slim-$(BUILD_HARNESS_DOCKER_SHA_TAG)
# makefile (from '.build-harness', line 104)
builder-slim/build: DOCKER_FILE := Dockerfile.slim
# makefile (from '.build-harness', line 94)
builder-slim/build: BUILD_HARNESS_DOCKER_SHA_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
builder-slim/build:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=3/32=9%, Rehash=0, Collisions=0/4=0%
#  recipe to execute (from '.build-harness', line 106):
	@$(MAKE) --no-print-directory docker/build

clean::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from '.build-harness', line 75):
	@if [ -d "$(BUILD_HARNESS_PATH)" ]; then \
		if [ -d build-harness ] && [ "$(BUILD_HARNESS_PATH)" -ef build-harness ]; then \
			echo rm -rf build-harness; \
			rm -rf build-harness; \
		else \
			echo Not removing build harness from "$(BUILD_HARNESS_PATH)" because it appears to be shared.; \
			echo If you are sure you want to delete it, run: ; \
			echo '   rm -rf "$(BUILD_HARNESS_PATH)"'; \
		fi; \
	fi

init::
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from '.build-harness', line 70):
	@ $(harness_install)

# makefile (from '.build-harness', line 116)
build-harness/shell: MOUNT_HOME = $(shell [ -d "$$HOME" ] && printf -- "-e HOME -v \"%s\":\"%s\"" "$$HOME" "$$HOME")
# makefile (from '.build-harness', line 117)
build-harness/shell: TARGETS = $(TARGET)
# makefile (from '.build-harness', line 121)
build-harness/shell: RUNNER_DOCKER_IMAGE = $(BUILD_HARNESS_DOCKER_IMAGE)
# makefile (from '.build-harness', line 120)
build-harness/shell: RUNNER_DOCKER_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
# makefile (from '.build-harness', line 119)
build-harness/shell: ENTRYPOINT := /bin/bash
# makefile (from '.build-harness', line 118)
build-harness/shell: ARGS := -l || true
build-harness/shell: build-harness/runner
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=6/32=19%, Rehash=0, Collisions=5/14=36%
#  recipe to execute (from '.build-harness', line 123):
	@exit 0

# makefile (from '.build-harness', line 142)
pr/readme/host: ARGS := readme/deps readme
pr/readme/host: safe-directory
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=1/32=3%, Rehash=0, Collisions=0/1=0%
#  recipe to execute (from '.build-harness', line 146):
	$(MAKE) $(ARGS)

lint:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 10):
	$(SELF) terraform/install terraform/get-modules terraform/get-plugins terraform/lint terraform/validate

# makefile (from '.build-harness', line 120)
pr/github-update: RUNNER_DOCKER_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
# makefile (from '.build-harness', line 121)
pr/github-update: RUNNER_DOCKER_IMAGE = $(BUILD_HARNESS_DOCKER_IMAGE)
# makefile (from '.build-harness', line 139)
pr/github-update: ENTRYPOINT := /usr/bin/make
# makefile (from '.build-harness', line 143)
pr/github-update: ARGS := github/update
pr/github-update: build-harness/runner
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=4/32=12%, Rehash=0, Collisions=3/6=50%

# makefile (from '.build-harness', line 116)
builder: MOUNT_HOME = $(shell [ -d "$$HOME" ] && printf -- "-e HOME -v \"%s\":\"%s\"" "$$HOME" "$$HOME")
# makefile (from '.build-harness', line 117)
builder: TARGETS = $(TARGET)
# makefile (from '.build-harness', line 121)
builder: RUNNER_DOCKER_IMAGE = $(BUILD_HARNESS_DOCKER_IMAGE)
# makefile (from '.build-harness', line 120)
builder: RUNNER_DOCKER_TAG = $(shell $(BUILD_HARNESS_DOCKER_SHA_TAG_CMD))
# makefile (from '.build-harness', line 119)
builder: ENTRYPOINT := /bin/bash
# makefile (from '.build-harness', line 118)
builder: ARGS := -l || true
builder: build-harness/runner
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=6/32=19%, Rehash=0, Collisions=5/14=36%
#  recipe to execute (from '.build-harness', line 123):
	@exit 0

# makefile (from '.build-harness', line 158)
tester/pull: TEST_HARNESS_DOCKER_TAG = latest
# makefile (from '.build-harness', line 157)
tester/pull: TEST_HARNESS_DOCKER_IMAGE = cloudposse/test-harness
tester/pull:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=2/32=6%, Rehash=0, Collisions=2/4=50%
#  recipe to execute (from '.build-harness', line 164):
	docker pull $(TEST_HARNESS_DOCKER_IMAGE):$(TEST_HARNESS_DOCKER_TAG)

# makefile (from '.build-harness', line 141)
pr/auto-format/host: ARGS := github/update terraform/fmt readme
pr/auto-format/host: safe-directory
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
# variable set hash-table stats:
# Load=1/32=3%, Rehash=0, Collisions=0/1=0%
#  recipe to execute (from '.build-harness', line 146):
	$(MAKE) $(ARGS)

build-harness/runner:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from '.build-harness', line 170):
	$(info Starting $(RUNNER_DOCKER_IMAGE):$(RUNNER_DOCKER_TAG))
	docker run --name build-harness \
		--rm -it \
		-e PACKAGES_PREFER_HOST=true \
		$(addprefix -e ,$(DOCKER_ENVS)) \
		$(MOUNT_HOME) \
		-v $(CURDIR):/host \
		--workdir /host \
		--entrypoint $(ENTRYPOINT) \
		$(RUNNER_DOCKER_IMAGE):$(RUNNER_DOCKER_TAG) $(ARGS)

# files hash-table stats:
# Load=31/1024=3%, Rehash=0, Collisions=22/175=13%
# VPATH Search Paths

# No 'vpath' search paths.

# No general ('VPATH' variable) search path.

# strcache buffers: 1 (0) / strings = 50 / storage = 622 B / avg = 12 B
# current buf: size = 8162 B / used = 622 B / count = 50 / avg = 12 B

# strcache performance: lookups = 200 / hit rate = 75%
# hash-table stats:
# Load=50/8192=1%, Rehash=0, Collisions=1/200=0%
# Finished Make data base on Fri Aug 19 13:32:05 2022

 
